What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates the files and space in Git to track
	commits for files that will be added to that repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory since you get to 
	choose the files that you want to put in it.  It differs from the 
	repository because it is just a list of files that are not yet committed
	and therefore no metadata for them is stored.  The value the staging area
	offers is that is provides a space to collect your files for a commit
	allowing you to alter the collection of files and get them right before
	initializing them in the repository.


How can you use the staging area to make sure you have one commit per logical
change?
	
	You can use the staging area to add files that are all related to one logical
	change as each file is ready.  This means you don't have to wait until you
	change all the file in order to stage them.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches are useful to test out new ideas of code or to create different
	versions (like a paid and a free version of an app).  I would add a 
	branch whenever I was changing a major feature of a program that 
	results in a fundamental difference in how it works (like the easy
	version of the game in this part of our lesson).


How do the diagrams help you visualize the branch structure?
	
	Diagrams help you to see where a branch was created which provides a 
	visualization of what commits exist in each branch.  This lets you
	quickly determine whether a particular feature, bug or other 
	attribute is present in that particular code.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	Merging two branches adds all the additions in the two branches, and deletes
	all the deletions in both branches and keeps any code kept in both 
	branches.  It is represented by two branches merging into one node
	because that is just logical.
	

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
